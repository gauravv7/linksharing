<<<<<<< HEAD
======1_introduction_to_grails==
1	Create basic grails app (linksharing) and add .gitignore files for excluding files from git
2	Change default package of grails app in application.yml
3	Use mysql as database in your application
4	Use mysql jar in build.gradle 
5	Update database drive class name in application.yml
6	Create database with name linksharing 
7	Update dbcreate property to update mode
8	Udpate username password and database connection url according to the system
9	Add index action in util controller and use different logging levels
10	Updated logging and pattern in logback.groovy
11	Added log statements of params in utilcontroller index action
12	Add app context to / to remove app name in url
13	Read config properties from external config and use BootStrap.groovy for verifying properties are actually read from external config

=======2_domains================

1.Add User domain class with fields as mentioned by requirement doc
2.Add following constraints
	Email should be unique, email type, not null, not blank
	Password should be not null, not blank and minimum 5 charactes
	FirstName,LastName shoule not be null and not blank
	Photo, Admin and Active field can be null
	Write test cases for validating user (including username and email 		uniqueness)
3. Add topic domain and its fields with following constraints:
	Topic name should be not null, not blank, unique per user
	Visibility should be enum and should not be null
	Created by should not be null 
	Write test cases for validating topic
4. Add subscription domain and seriousness enum.Add following constaints:
	User,topic, seriousness should not be null
	User should not be able to subscribe to topic multiple times 
	Write test cases for validating subscription domain
5. Add Resource abstract domain as parent class and 2 child classes Document Resource domain and Link Resource domain
6. Resource should have createdBy, description and topic
7. Document resource should have filepath
8. Description of resource should be of text type
9. Link Resource should have valid url
10. Add test cases for link resource and document resource domains
11. Add resource rating domain with following constraints:
	Resource rating should not have null createdBy, score, resource
	Resource score should not be more than 5 and less than 1
	Resourcerating can be given by a user only one time for a resource
	Write test cases for validating resource rating domain
12. Add ReadingItem domain for user reading items with constraints: -
	User,isRead and resource cannot be null for readingitem
	Readingitem resource should be unique per user
	Write test cases for validating readingItem domain
13. Add transient of getName in user domain and update test cases accordingly
14. Change data type of photo in user as longblob
15. Add dateCreated and lastUpdated in all domains
16. Define relationships between domain classes: -
	User hasMany topics,subscriptions,readingItems and resources -
	Topic hasMay subscriptions and resources
	Resource hasMany ratings and readingItems
=======3_gorm_basics==============
1	Add createUsers method to Bootstrap to create 1 admin and 1 normal user.
2	Use failOnError and flush true for persisting users
3	Use log info statements for data creation and log error if there are any errors
4	Users will be created only when there are no records in user table
5	Add constants file for default password
6	Add createTopics method in bootstrap
7	5 topics per user needs to be created if Topic count is 0
8	Creator of topic should automatically be subscribed to topic (Use after insert event of topic)
9	Errors should be logged if topic or subscriptions is not saved
10	WithNewSession in after insert because it will not work without it
11	Seriousness should be very serious for auto subscribed topic in after insert
12	Add createResources method which create 2 link resource and 2 document resource in each topic
13	It should create resource only if there is not data in resource table
14	Description of the resource should include topic name
15	Error should be logged
16	Creator of the resource should be same as creator of the topic
17	Add subscribeTopics for user to subscribe all the topics which are not created by user
18	Subscription should be created only if the subscription do not exit for user and topic 
19	Errors should be logged
20	log statement when subscription is created with user and topic object
21	toString should be implemented for Topic with topic name and for User with username
22	Add createReadingItems in bootstrap to create dummy reading items
23	Resources which are not created by the user in the topics subscribed by him/her should have in his/her reading item.
24	Reading item of resource should be created only if it does not already exit in users reading item
25	Add createResourceRatings to add dummy ratings
26	Add rating for all the unread reading items of the user
27	createdBy of resourcerating should be createdby of reading item and resource of resourcerating should be resource of readingitem
28	Add test cases for tostring of Topic and User
29	Add toString for linkresource with url
30	Add test case for document resource and linkresource tostring
=======4_controller_basics================
     1	Add logincontroller with index,loginHandler and logout action
     2	LoginController index action will check if there is session.user exists or not if exist forward to user controller index action else render failure
     3	Add User controller with index action that will render text 'user dahsboard'
     4	Login Controller logout action will do session.invalidate and forward the request to login controller index action
     5	LoginController loginHandler action will take 2 argument username and password
     6	If Loginhandler action finds user with given username and password then it will check user active or not if active set session.user to user and redirect request to login index action
     7	If user is not active then set flash.error 'Your accoutn is not active'
     8	If user is not found then flash.error is set to 'User not found' and flash.error is rendered - Urlmapping is updated for / action to controller login action index
     9	Delete existing index.gsp file Added test cases for login controller
    10	That should include testing of all conditions specified in above exercise 
    11	Add Application Interceptor with logging params for all controller and actions
    12	Add session check filter in application interceptor
    13	Create loginCheck interceptor which will work all the controller except login
    14	If session.user is not set then redirect user to login index, this should be done in interceptor - user index action should render session user username
    15	Update test case for usercontroller index action Add show action for topic which will take id as a parameter
    16	If topic do not exist in database then user should redirected to login index action and flash error should be set
    17	If topic found and its a public topic then it should render sucess
    18	If topic found is private then check the subscription of logged in user exist for the topic or not
    19	If subscription exist then render success otherwise redirect user to login index and set flash error
    20	Write test case for the same Adde validator and transient field for confirmpassword -Confirm password will be nullable true and blank true when user is updating but when its getting created it should match password and it cannot be null
    21	Update bootstrap for user creation Create register action in login controller to register user
    22	Errors with proper message properties should be rendered if user is not set and flash message should be set.
    23	If user is set the success should be rendered - Validation message should be on email(null,blank,email,unique), username(null,blank,unique), firstName(null,blank), lastName (null,blank), password(null,blank,minsize), confirmPassword (null,blank,customvalidator)
    24	Render validation errors using message tag No need to create UI for this just send the parameter through url.
=======5_domain_advance=====================
     1	Add default sorting: - Topic domain should be default sorted by name asc
     2	-User should be default sorted by the id desc so that latest created user comes first
     3	Use read() for /topic/show and load() for /resource/delete & /topic/delete action.
     4	Exception of object not found should be handled in resource delete
     5	Add topic save action in TopicController
     6	Add save action in topic controller, which takes a topic and string seriousness as an argument
     7	Create a method in visibility enum to convert string into enum and write test case for the same
     8	Session user should be createdBy of the topic
     9	If a topic is saved without error flash message should be set and success should be rendered
    10	If a topic is not saved errors should be logged flash error should be set and error text should be rendered
    11	Write the test case for the Topic save.
    12	Write a test case for topic deletion.
    13	Subscription domain should have a default seriousness as Serious.
    14	Implement subscription save, update, delete
    15	Create subscription delete action which takes id as parameter, if it exist then delete and send success else render not found
    16	Create save action which takes id as parameter for topic id, user for subscription should be read from the session, if subscription save render success else errors -
    17	Create update action which takes an id and serious as a parameter if subscription and seriousness found, then save else render not found, if saved then render success else errors
    18	Create static method in seriuosness which take string as parameter and returns seriousness, it should be case insensitive
    19	Write the test cases for subscription save, update, delete functionality.
    20	Use eager fetching for topic and user in subscription
=======6_gorm_advanced=========================
1. Add search named query for resources.
	-Add String q, Integer max,Integer offset,String order, String sort parameter in searchCO which will be used for text search
	-Create ResourceSearchCo which extend searchCO and add topicId long field into it to get resource specific to topic
	-Create named query 'search' which takes ResourceSearchCO as argument and find resources specific to topic id.
	-Update topic show action which will take ResourceSearchCO as an argument other than long id

2. Add resource/search action for resource search in public topics
	-Update ResourceSearchCO and add visibility field in it
	-Updated Resource search named query and add condition to search topic with specified visibility
	-Add search action in a resource controller, which will search if q parameter is set and it will set visibility of resourcesearchco to public

3. Create method in resource to get rating details like totalvotes, avgscore, totalscore of a resource
	-Create transient in resource ratingInfo and create method which will return RatingInfoVO
	-RatingInfoVO will have fields totalVotes, averageScore, totalScore
	-Write criteria query to get the above information.
	-Call this method from resource show action

4. Add resource show action and get trending topics also
	- Public Topic with maximum resources is considered as a trending topic
	- Create static method getTrendingTopics in Topic domain which will return list of TopicVO
	- TopicVO will have id,name,visibility,count,createdBy fields
	- Use createalias and groupproperty in criteria
	- Use count for getting count of resources of a topic
	- Use multiple order statement first one ordered by resource count and second one ordered by topic name
	-Maximum 5 records should be shown
	- Topic with maximum resource should come first
5. Add top post when user is not logged in
	- Resource with maximum number of votes will be top post
	-Only 5 posts should be shown in order of maximum vote count
	-Use groupProperty with id of resource otherwise lots of queries will be fired
	-Collect Resource list with resource id using getall rather then finder otherwise ordering will not be maintained

6. Add Inbox feature on user/index when user is loggedin
	- Create method getUnReadResources in user domain which takes SearchCO argument and returns unreaditems of user from ReadingItem domain
	- The search should also work using user/index page, q parameter of SearchCO. If searchco.q is found then getUnReadResources method will search the items based on ilike of resource.description.
	- The pagination parameter should also be used in getUnReadResources criteria query. Create readingItem/changeIsRead action which takes Long id and Boolean isRead
	- User executeUpdate to change the isRead of readingItem with given id
	- If value returned by executeUpdate is 0 then render error else render success

7. Write integration tests where criteria and hql queris are used
 -Create linksharing_test database for testing, which should be used in a testing environment.
=======7_views
1  Add application layout
2  Application layout should use bootstrap and font awesome
3  All the previous unused files of css, images, js should be removed and only required files should be committed
4  Single js and single js file should be included using asset tag other css and js sould be included in main js, as per the syntex of asset pipeline
5  All the static resource should be in assets folder, no need to add jquery as this plugin is already added in grails BuildConfig by default
6  Update layout main.gsp according to the document mentioned in intro to linksharing, add flash message and flash error in layout by using g:if tag
7  Add templates topic/create topic/email linkResource/create documentResource/create and include them in layout which will be opened in modal window by clicking on header links. These links and templates are added only when user is logged in
8  Implement topic/save and linkresource/save save action. Topic, linkresource save should set errors in flash and user should redirected to the dashboard, successful save should set flash.message.
9  Login should work from login form on home page and show top posts and recent post on home page
10  Create templates for resource/show topic/show user/login user/register
11  Create static method in topic to get trending topic which will be used on user dashboard as well as resource show action
12  Add createdBy in topicVO so that createdBy can be shown in trending topic list on UI
13  Create transient method in user domain getSubscribedTopic to get only subscribed topics of user, this method will be used in user dashboard and dropdown of linkresource create and email invite of topic
14  Add /user/forgotPassword template which will show up on click on forgotPassword link in login form
15  Update test cases accordingly
16  Tags which will be used for this are layouthead, layoutbody, layouttitle, select, if, else, render, message, asset:javascript,stylesheet, actionsubmit, form, filed, each, img, paginate, uploadform
17  Implement Topic show page
18  Create transient method getSubscribedUsers in topic domain to get all the subscribed users
19  Create user/_show template from user index page which take user as model and use this template to show subscribed user list in topic show page and user index page
20  Change links on subscriptions and posts in topic/_show template to topic show action
21  Implement search on posts header of topic show pass topic id as hidden field in form and also pass it in pagination parameters
22  Update test cases with new changes
